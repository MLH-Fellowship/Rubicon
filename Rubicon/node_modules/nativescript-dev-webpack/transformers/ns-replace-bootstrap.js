"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const ts = require("typescript");
const transformers_1 = require("@ngtools/webpack/src/transformers");
const ast_utils_1 = require("../utils/ast-utils");
const transformers_utils_1 = require("../utils/transformers-utils");
function nsReplaceBootstrap(getNgCompiler, entryPath, projectDir) {
    const shouldTransform = (fileName) => !fileName.endsWith('.ngfactory.ts') && !fileName.endsWith('.ngstyle.ts');
    const getTypeChecker = () => getNgCompiler().typeChecker;
    const standardTransform = function (sourceFile) {
        const ops = [];
        const ngCompiler = getNgCompiler();
        // TODO: use something public when available
        const enableIvy = ngCompiler._compilerOptions && ngCompiler._compilerOptions.enableIvy;
        const entryModule = transformers_utils_1.getResolvedEntryModule(ngCompiler, projectDir);
        if (!shouldTransform(sourceFile.fileName) || !entryModule) {
            return ops;
        }
        // Find all identifiers.
        const entryModuleIdentifiers = transformers_1.collectDeepNodes(sourceFile, ts.SyntaxKind.Identifier)
            .filter(identifier => identifier.text === entryModule.className);
        if (entryModuleIdentifiers.length === 0) {
            return [];
        }
        const relativeEntryModulePath = path_1.relative(path_1.dirname(sourceFile.fileName), entryModule.path);
        const normalizedEntryModulePath = `./${relativeEntryModulePath}`.replace(/\\/g, '/');
        // Find the bootstrap calls.
        entryModuleIdentifiers.forEach(entryModuleIdentifier => {
            // Figure out if it's a `platformNativeScriptDynamic().bootstrapModule(AppModule)` call.
            if (!(entryModuleIdentifier.parent
                && entryModuleIdentifier.parent.kind === ts.SyntaxKind.CallExpression)) {
                return;
            }
            const bootstrapCallExpr = entryModuleIdentifier.parent;
            if (bootstrapCallExpr.expression.kind !== ts.SyntaxKind.PropertyAccessExpression) {
                return;
            }
            const bootstrapPropAccessExpr = bootstrapCallExpr.expression;
            if (bootstrapPropAccessExpr.name.text !== 'bootstrapModule'
                || bootstrapPropAccessExpr.expression.kind !== ts.SyntaxKind.CallExpression) {
                return;
            }
            const nsPlatformCallExpr = bootstrapPropAccessExpr.expression;
            if (!(ast_utils_1.getExpressionName(nsPlatformCallExpr.expression) === 'platformNativeScriptDynamic')) {
                return;
            }
            const idPlatformNativeScript = ts.createUniqueName('__NgCli_bootstrap_1');
            const idNgFactory = ts.createUniqueName('__NgCli_bootstrap_2');
            const firstNode = transformers_1.getFirstNode(sourceFile);
            const factoryClassName = enableIvy ? entryModule.className : entryModule.className + 'NgFactory';
            const factoryModulePath = enableIvy ? normalizedEntryModulePath : normalizedEntryModulePath + '.ngfactory';
            const newBootstrapPropAccessExpr = ts.getMutableClone(bootstrapPropAccessExpr);
            const newNsPlatformCallExpr = ts.getMutableClone(bootstrapPropAccessExpr.expression);
            newNsPlatformCallExpr.expression = ts.createPropertyAccess(idPlatformNativeScript, 'platformNativeScript');
            newBootstrapPropAccessExpr.expression = newNsPlatformCallExpr;
            newBootstrapPropAccessExpr.name =
                enableIvy ? ts.createIdentifier("bootstrapModule") : ts.createIdentifier("bootstrapModuleFactory");
            const newBootstrapCallExpr = ts.getMutableClone(bootstrapCallExpr);
            newBootstrapCallExpr.expression = newBootstrapPropAccessExpr;
            newBootstrapCallExpr.arguments = ts.createNodeArray([
                ts.createPropertyAccess(idNgFactory, ts.createIdentifier(factoryClassName))
            ]);
            ops.push(
            // Insert an import of the {N} Angular static bootstrap module in the beginning of the file:
            // import * as __NgCli_bootstrap_2 from "nativescript-angular/platform-static";
            ...transformers_1.insertStarImport(sourceFile, idPlatformNativeScript, 'nativescript-angular/platform-static', firstNode, true), 
            // Insert an import of the module factory in the beginning of the file:
            // import * as __NgCli_bootstrap_1 from "./app.module.ngfactory";
            ...transformers_1.insertStarImport(sourceFile, idNgFactory, factoryModulePath, firstNode, true), 
            // Replace the bootstrap call expression. For example:
            // from: platformNativeScriptDynamic().bootstrapModule(AppModule);
            // to:   platformNativeScript().bootstrapModuleFactory(__NgCli_bootstrap_2.AppModuleNgFactory);
            new transformers_1.ReplaceNodeOperation(sourceFile, bootstrapCallExpr, newBootstrapCallExpr));
        });
        return ops;
    };
    return transformers_1.makeTransform(standardTransform, getTypeChecker);
}
exports.nsReplaceBootstrap = nsReplaceBootstrap;
//# sourceMappingURL=ns-replace-bootstrap.js.map