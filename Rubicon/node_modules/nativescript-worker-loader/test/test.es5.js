"use strict";

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const assert = require("assert");
const fs = require("fs");
const path = require("path");
const del = require("del");
const webpack = require("webpack");
const { NativeScriptWorkerPlugin } = require("../NativeScriptWorkerPlugin");

process.chdir(__dirname);

const contains = (first, second) => first.indexOf(second) > -1;

if (!Object.prototype.hasOwnProperty.call(assert, "contains")) {
    assert.contains = (first, second) => assert.ok(contains(first, second));
}

const readFile = file => fs.readFileSync(file, "utf-8");

const makeBundle = (name, options) => del(`expected/${name}`).then(() => {
    const config = Object.assign({
        entry: `./fixtures/${name}/entry.js`,
        output: {
            path: path.join(__dirname, `expected/${name}`),
            filename: "bundle.js"
        },
        plugins: [new NativeScriptWorkerPlugin()]
    }, options);
    const bundle = webpack(config);

    return new Promise((resolve, reject) => {
        bundle.run((err, stats) => {
            if (err) {
                return reject(err);
            }

            if (stats.compilation.errors.length) {
                return reject(Error(stats.toString("errors-only")));
            }

            return resolve(stats);
        });
    });
});

const getAssetsMeta = stats => stats.toJson().assets;

const getChunksMeta = stats => stats.toJson().children.map(item => item.chunks).reduce((acc, item) => acc.concat(item), []).map(item => item.files);

const getChunks = (stats, testName) => getChunksMeta(stats).map(item => `expected/${testName}/${item}`);

describe("worker-loader", () => {
    const inlineOptionErrorMessage = "The NativeScript worker loader doesn't support inline workers!";
    const noFallbackOptionErrorMessage = "The NativeScript worker loader cannot be used without a fallback webworker script!";

    const statsFileIsCorrect = (() => {
        var _ref = _asyncToGenerator(function* (stats, testName) {
            const assets = getAssetsMeta(stats);
            const workerStatsAssetMeta = assets.find(function (f) {
                return f.name === "__worker-chunks.json";
            });
            yield assert.ok(workerStatsAssetMeta);

            const chunks = getChunksMeta(stats);
            const workerStatsFilePath = `expected/${testName}/${workerStatsAssetMeta.name}`;
            const workerStatsFile = yield readFile(workerStatsFilePath);

            return chunks.every(function (chunk) {
                return contains(workerStatsFile, chunk);
            });
        });

        return function statsFileIsCorrect(_x, _x2) {
            return _ref.apply(this, arguments);
        };
    })();

    it("should create chunk with worker", _asyncToGenerator(function* () {
        const testName = "worker";
        const stats = yield makeBundle(testName);

        const files = getChunks(stats, testName);
        assert.equal(files.length, 1);

        const content = yield readFile(files[0]);
        yield assert.contains(content, "worker test mark");

        assert.ok((yield statsFileIsCorrect(stats, testName)));
    }));

    it("should create chunk with specified name in query", _asyncToGenerator(function* () {
        const testName = "name-query";
        const stats = yield makeBundle(testName);
        const file = getChunks(stats, testName)[0];
        assert.equal(file, `expected/${testName}/namedWorker.js`);

        const content = yield readFile(file);
        yield assert.contains(content, "named worker test mark");

        assert.ok((yield statsFileIsCorrect(stats, testName)));
    }));

    it("should create named chunks with workers via options", _asyncToGenerator(function* () {
        const testName = "name-options";
        const stats = yield makeBundle(testName, {
            module: {
                rules: [{
                    test: /(w1|w2)\.js$/,
                    loader: "../index.js",
                    options: {
                        name: "[name].js"
                    }
                }]
            }
        });

        const files = getChunks(stats, testName).sort();
        assert.equal(files.length, 2);

        const [first, second] = files;

        assert.equal(first, `expected/${testName}/w1.js`);
        assert.equal(second, `expected/${testName}/w2.js`);

        const [firstContent, secondContent] = files.map(readFile);

        yield assert.contains(firstContent, "w1 via worker options");
        yield assert.contains(secondContent, "w2 via worker options");

        assert.ok((yield statsFileIsCorrect(stats, testName)));
    }));

    it("should throw with inline option in query", () => makeBundle("inline-query").catch(error => assert.contains(error.message, inlineOptionErrorMessage)));

    it("should throw with inline in options", () => makeBundle("inline-options", {
        module: {
            rules: [{
                test: /(w1|w2)\.js$/,
                loader: "../index.js",
                options: {
                    inline: true
                }
            }]
        }
    }).catch(error => assert.contains(error.message, inlineOptionErrorMessage)));

    it("should throw with fallback === false", () => makeBundle("no-fallbacks", {
        module: {
            rules: [{
                test: /(w1|w2)\.js$/,
                loader: "../index.js",
                options: {
                    fallback: false
                }
            }]
        }
    }).catch(error => assert.contains(error.message, noFallbackOptionErrorMessage)));

    ["node", "async-node", "node-webkit", "electron-main", "electron-renderer"].forEach(target => {
        it(`should not have missing dependencies (${target})`, () => makeBundle("nodejs-core-modules", {
            target,
            module: {
                rules: [{
                    test: /(w1|w2)\.js$/,
                    loader: "../index.js",
                    options: {
                        name: "[name].js",
                        fallback: false
                    }
                }]
            }
        }).then(stats => {
            assert.equal(stats.compilation.missingDependencies.size, 0);
        }));
    });
});
